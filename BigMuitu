
/*
大整数乘法：
时间复杂度O(m+n)
空间复杂度O(m+n)
*/
#include<iostream>
#include<string>
#include<cassert>
using namespace std;

string BigMultu(const string &s1, const string &s2)
{
	int i, j;
	int length1 = s1.size();
	int length2 = s2.size();
	int *c1 = new int[length1]();
	int *c2 = new int[length2]();
	int *result = new int[length1 + length2]();
	for (i = 0; i < length1; i++)
	{
		assert(s1[i]>47 && s1[i] < 58);
		c1[i] = s1[i] - '0';
	}
	for (i = 0; i < length2; i++)
	{
		assert(s2[i]>47 && s2[i] < 58);
		c2[i] = s2[i] - '0';
	}

	for (i = 0; i < (length1 + length2); i++)
		result[i] = 0;

	int temp;
	int k;
	int flag = 0;
	int sum;
	for (i = length2 - 1; i >= 0; i--)
	{
		for (j = length1 - 1; j >= 0; j--)
		{
			temp = c2[i] * c1[j];
			for (k = i + j + 1; temp > 0; k--)
			{
				sum = temp % 10 + result[k] + flag;
				result[k] = sum % 10;
				flag = sum / 10;
				temp = temp / 10;
			}
			while (flag)
			{
				sum = result[k] + flag;
				result[k--] = sum % 10;
				flag = sum / 10;
			}
		}
	}
	bool begin = false;
	string str;
	for (i = 0; i < length1 + length2; i++)
	{
		if (result[i] > 0)
			begin = true;
		if (begin)
			str.push_back(result[i] + '0');
	} 

	delete[]c1;
	delete[]c2;
	delete[]result;
	return str;
}

int main()
{
	string s1;
	string s2;
	cin >> s1;
	cin >> s2;
	string str = BigMultu(s1,s2);
	cout << str << endl;

	system("pause");
}
